#+Title: Concurrency in Elixir: Actor Model
#+Author: Natxo Cabré
#+Email: @keoko
#+OPTIONS: toc:nil num:nil reveal_slide_number:nil reveal_title_slide:nil
#+REVEAL_THEME: beige
#+REVEAL_TRANS: linear
* Concurrency in Elixir = Actor Model
#+BEGIN_QUOTE
"The world is concurrent.\\ 
Things in the world don’t share data.\\
Things communicate with messages.\\
Things fail."\\
-- Joe Armstrong
#+END_QUOTE
* Plan
- Why concurrency?
- Theory of Actor Model
- Implementation of Actor Model in Elixir
- Demo
* Why concurrency? 
** "The Free Lunch Is Over" (2005)
#+ATTR_HTML: :height 50%, :width 50% :style border: none;
[[./img/free_lunch.png]]
** "The Free Lunch Is Over" Conclusion
#+BEGIN_QUOTE
"If you haven’t done so already, *now is the time to take a hard look at the design of your application, determine what operations are CPU-sensitive* now or are likely to become so soon, *and identify how those places could benefit from concurrency*.\\
Now is also the time for you and *your team to grok concurrent programming*'s requirements, pitfalls, styles, and idioms." -- Herb Sutter (2005)
#+END_QUOTE

** New Concurrent Programming Languages
- Clojure :: 2007 [STM, agents, CSP] (Java, CLR)
- Go :: 2009 [CSP] (Python, C++)
- Elixir ::  2010 [Actors] (Ruby)
** Languages/Frameworks with Actors libraries
- Erlang/Elixir :: -
- Scala :: Akka
- NET :: Orleans
- Ruby :: Cellulloid
- Python :: Pulsar 
* Actor Model
** Carl Hewitt (1973)
Actor Model is a conceptual model to deal with concurrent computation.
** Actor
- An actor is the *fundamental unit of computation*.
- It can do only:
  1. create some more actors
  2. send messages
  3. designate how to handle the next message it will receive
** "One Ant is no Ant"
Actors come in "systems". To distinguish between them, they need an address.
#+ATTR_HTML: :alt Actors diagram :style border:none;
[[./img/actors.png]]
** Message Passing
- Messages are sent asynchronously
- Message order is not guaranteed
- Best effort to receive a message
- A message will be delivered at most once
- There is no intermediary
* Concurrency in Elixir
** Actor = Process
#+INCLUDE: "src/slides/process_sum.exs" src elixir
** Actor Example
#+INCLUDE: "src/slides/process_counter.exs" src elixir
** Message = Term
#+INCLUDE: "src/slides/terms.exs" src elixir
** Message Passing
#+INCLUDE: "src/slides/message_passing.exs" src elixir
* Demo
** Counter
** Chat Server
** Distributed Chat Server
* Recap
- "The free lunch is over", we have to start designing with concurrency in mind.
- Actor Model is a conceptual model to deal with concurrent computation.
- Erlang/Elixir implements Actor Model to build massively concurrent, fault-tolerant, scalable systems.
- An actor is an Erlang/Elixir process which encapsulates state.
- Actors communicate between them with messages, providing they have its PID (process id).

* References
- [[http://www.gotw.ca/publications/concurrency-ddj.htm][The Free Lunch Is Over]]  
- [[https://www.youtube.com/watch?v=7erJ1DV_Tlo][Hewitt, Meijer and Szyperski: The Actor Model]]
- [[http://theerlangelist.blogspot.com.es/2013/01/actors-in-erlangelixir.html][Actors in Erlang/Elixir]]
- [[https://www.youtube.com/watch?v=lPTqcecwkJg&t=177s][Introduction to the Actor Model for Concurrent Computation]]
- [[http://www.brianstorti.com/the-actor-model/][The actor model in 10 minutes]]
- [[https://pragprog.com/book/pb7con/seven-concurrency-models-in-seven-weeks][Seven Concurrency Models in Seven Weeks: When Threads Unravel]]
- [[https://gist.github.com/josevalim/2783092/a9740c9652267d55851ede2a7a3091c72466db9b][Jose Valim's chat sample]]
- [[http://www.akitaonrails.com/2015/11/25/exmessenger-exercise-understanding-nodes-in-elixir][ExMessenger Exercise: Understanding Nodes in Elixir]]
* Food For Thought
- OTP :: set of Erlang libraries to module concurrent processes well.
- Riak Core :: Library to build Distributed Systems in Erlang
- Phoenix :: Elixir Web Server ala "Ruby on Rails"
- Nerves :: Framework to build projects in embedded systems with Elixir
* Q&A
* Thanks!

#+BEGIN_COMMENT
* To check
Chat Server
learn you some erlang
alchemist
accounts

- register processes
- https://www.dailydrip.com/topics/elixir/drips/processes-and-messaging-08687de7-07c6-4cc3-b6c6-4398d137820c
- http://learnyousomeerlang.com/the-hitchhikers-guide-to-concurrency#concepts-of-concurrency
#+END_COMMENT
